
//Includes
#include<opencv2\opencv.hpp>ï»¿
#include<opencv2\core\core.hpp>
#include<opencv2\highgui\highgui.hpp>
#include<opencv2\imgproc\imgproc.hpp>
#include<iostream>
#include<sstream>
#include<string>
#include<opencv\highgui.h>
#include<opencv\cv.h>
#include<vector>
#include<cstdlib>
#include<stdio.h>
#include<stdlib.h>




//namespace
using namespace cv;
using namespace std;



int main() {


	VideoCapture cap(0); // open the default camera
	if (!cap.isOpened()) {  // check if we succeeded
		return -1;
	}



	while (1) {
		Mat imgImport;

		cap.read(imgImport);

		imshow("img", imgImport);

		if (imgImport.empty()) {
			std::cout << "error: image did'nt load ";
			return -2;
		}

			std::string saveNameMoon = "C:/Users/Casper Bang-Hansen/source/repos/OpenCVIMGTest/MoonFolder/";
			cv::String Path2(saveNameMoon); 
			vector<cv::String> fileNameSaveMoon;
			cv::glob(Path2, fileNameSaveMoon, true);
			cv::Mat imgGrayScale;
			double meanM;

			//const
			float moonThreshold = 20;
			int printedLine = 0;

			//Convert to grayscale
				cv::cvtColor(imgImport, imgGrayScale, CV_BGR2GRAY);

			//prints one line with:
			if (printedLine == 0) {
				std::cout << "Mean" << "		" << "Over threshold\n";
				printedLine = 1;
			}

				//mean
				Scalar average = mean(imgGrayScale);

				//Scalar->string
				string AVG = std::to_string(average[0]);
				

				//prints AVG
				String width = "	";
				std::cout << AVG << width;

				//Is the picture within the threshold
				String TorF;

				meanM = average[0];
				if (moonThreshold <= meanM) {
					TorF = "True";
				}
				else {
					TorF = "false";
				}
				std::cout << TorF + "\n";
				cv::imwrite(saveNameMoon + AVG + ".jpg", imgImport);
				
				if (waitKey(25) == 'd') {
					break;
				}

	}
	// hold windows open
	system("pause");
	return(0);
	
}

